package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templs_404_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x6a\xc4\x30\x10\x46\xe1\x5e\xa7\xf8\x33\xbd\xad\x18\x5c\xca\x6a\xd3\xe5\x0e\x63\x6b\x1c\x09\x92\x91\x91\x85\x13\x10\xba\x7b\x20\x4d\x16\xb3\xf5\x2b\xbe\xd7\x1a\x82\xec\x49\x05\x54\xf3\x41\xbd\x1b\x17\xd2\x85\xed\x93\xcf\x73\x21\xe5\x6b\xe5\x32\x44\xe1\x20\x85\xbc\x01\x00\xc7\xb7\xba\x16\xd6\x40\x88\x45\xf6\x85\x2c\xf9\xb7\x8c\x9a\xf1\xc5\x49\x71\xf0\x87\x8c\xe3\xe8\x2c\x7b\xe3\x6c\x48\x97\x37\xad\x41\x34\xa0\x77\xf3\x40\x6f\x59\xab\x68\x25\xdc\xfc\x92\xbf\x51\xe5\xa7\x0e\x9b\x68\xfd\x3f\x88\x93\x9f\x5f\x67\xbc\xe7\x3f\x00\x51\x8a\xbc\x38\x1b\xa7\x27\xc8\x6f\x00\x00\x00\xff\xff\xa7\xe2\x48\x80\xe0\x00\x00\x00")

func templs_404_tmpl() ([]byte, error) {
	return bindata_read(
		_templs_404_tmpl,
		"templs/404.tmpl",
	)
}

var _templs_500_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x6e\xc3\x30\x0c\x85\xe1\x5d\xa7\x78\xe5\x1e\x3b\x19\xba\x39\x5a\x3b\x76\xe8\x09\x18\x8b\xb1\x04\x34\xa4\x21\x13\x76\x01\x43\x77\x2f\xd2\xa5\x46\xbb\x92\x0f\xf8\xfe\x7d\x47\x92\x7b\x51\x01\xb9\xcd\xd4\x5a\x18\x52\x59\x31\x7e\xf2\xb2\x5c\x49\x79\xbd\x71\x3d\x65\xe1\x24\x95\x62\x00\x80\x81\xff\x7c\x6f\x95\x35\x11\x72\x95\xfb\x95\x7a\x8a\x6f\x06\x37\x3c\xb8\x28\x66\x9e\xa4\xeb\xba\xa1\xe7\x18\x86\x3e\x95\x35\x86\x7d\x87\x68\x42\x6b\xe1\x40\x8f\xa6\x2e\xea\xf4\x3c\x03\xc7\x82\x6a\x1b\x5c\xbe\xfc\x34\x8a\xfa\x6f\x43\xbe\xc4\xd7\xf3\x19\xef\x36\x2f\x2f\xf8\xb0\x87\x78\x2e\x3a\x61\x13\x75\x6c\xd5\x74\xfa\x51\xf3\xe5\x39\xff\x07\x7f\x07\x00\x00\xff\xff\x87\x29\x86\x5a\xf4\x00\x00\x00")

func templs_500_tmpl() ([]byte, error) {
	return bindata_read(
		_templs_500_tmpl,
		"templs/500.tmpl",
	)
}

var _templs_index_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x6f\xdb\x3a\x12\x3e\xd7\xbf\x62\xca\xcd\xc1\x5e\xd4\x12\x9a\x06\x3d\xa4\xb2\x80\xa0\xdb\x02\x3d\x6c\xb6\xd8\x04\x0b\x2c\x16\x7b\xa0\xc4\x91\xc9\x84\x22\x55\x92\xb2\xe3\xfa\xf9\xbf\x3f\x8c\x28\x2b\x92\xe3\xf7\xd0\xf6\xf0\x7a\x89\xc8\x99\xf9\xe6\x9b\x6f\x86\x34\xbb\xdf\x83\xc0\x4a\x19\x04\x16\x6c\xc3\x0e\x87\x59\x26\xd4\x06\x4a\xcd\xbd\x5f\x31\xc3\x37\x05\x77\x4b\x89\x5c\xa0\x63\xf9\x0c\x20\x2b\xda\x10\xac\x81\xb0\x6b\x70\xc5\xe2\x82\x1d\xdd\x8b\x60\xa0\x08\x66\xa9\x4c\x65\x19\x28\xb1\x62\x5e\x72\x87\x0c\x7c\xd8\x69\x5c\x31\xa1\x7c\xa3\xf9\xee\xda\x58\x83\x2c\xbf\x23\x5b\x96\x46\x8c\x1f\xc6\xf6\x6d\x59\xa2\xf7\x11\x7e\x6d\x59\x7e\xe3\x1f\x41\xaa\xfa\xf5\x04\x89\x9f\x54\x50\x38\x6e\x04\x03\xe9\xb0\x5a\xb1\x94\xe5\xf7\x12\x61\x6d\x1b\x89\x0e\x0a\xd4\x76\x0b\x5b\xa5\x35\xe0\x53\xa3\xb9\x32\xb0\xb3\xad\xeb\x58\x80\x57\xdf\x31\x49\x92\x2c\xe5\xf9\x2c\x4b\x85\xda\xe4\xb3\xfd\x1e\xd0\x08\x38\x1c\x66\x23\xed\x4a\x6b\x02\x9a\xc0\xe0\x44\x40\x67\xb7\x51\xb6\xd1\x5e\x69\xf5\xb2\x16\xcb\xf7\xd1\x20\x2f\xf3\xd6\x78\x5e\x61\x72\xa7\xbe\xa3\xad\xe6\x59\x2a\x2f\xc9\x42\xff\xc6\x61\x91\x2e\x3b\x9a\x7a\x23\xa9\x80\x42\x05\xeb\x58\xbe\xdf\x43\xf2\xd1\x0a\x84\xc3\xa1\xe7\x3a\xb8\xfa\x9a\x6b\x9d\xdf\xda\x80\xaf\xe1\xc6\xec\xc0\xb4\x75\x81\xce\xc3\x1a\x0d\x3a\x1e\x50\x40\xb1\x83\x20\x95\x07\xde\x34\x5a\x95\x3c\x28\x6b\x80\x3b\x84\xe0\x5a\x04\x6b\xf4\x0e\x2a\xeb\xe0\xe9\xfd\x15\x70\x57\x4a\x15\xb0\x0c\xad\x43\x9f\x64\x69\xc4\x3e\x32\x3e\x26\xce\xe4\xe5\x50\xb0\xb6\x5e\x99\x35\xcb\x17\xc7\xda\x9e\xbd\xce\xe8\x02\x0e\x7d\xab\x83\xef\x4b\x9d\xc8\x19\x2d\x4b\x65\x4c\x27\xc5\x7e\x0f\xaa\x82\xe4\x93\x73\xd6\x91\xf4\x2f\x55\x2b\xfc\xb2\xe4\x5a\xdb\x36\xc0\xf3\xe7\x52\x70\xb3\x9e\x6a\x29\xaf\xf2\xaf\xdc\x11\x4d\x40\x42\xcb\x52\x79\x35\x32\x37\x9d\xb8\xc7\x3c\x59\xda\x9c\xd4\x4b\x43\xa1\x3d\xf6\x53\xb1\x55\x41\x42\xf2\xef\x8e\xec\x88\x96\x7c\x97\xdf\x1f\x87\xea\x1a\x08\x30\xb6\xbc\x43\x94\xef\x86\x72\xbe\xf8\xcf\xea\x09\xc5\xcf\x14\xd4\x9d\xb8\x69\x39\x9f\x68\x98\x4d\xd7\xc8\x17\xc5\xfc\x77\x18\x70\xe5\x3b\x22\xb7\xbc\x26\xf2\xc0\x8d\x00\xae\xb7\x7c\xe7\x41\x72\x0f\x55\xc7\x83\xf8\x8a\x37\x60\x2c\xd4\x3c\x04\x74\x20\xed\x16\x54\x80\x2d\xf7\xfd\x01\x10\xc9\x79\x49\x86\x73\x12\xcb\xba\x71\x8e\xef\xfe\xaa\xb2\x78\x97\x8c\x0a\x52\xc1\x77\x35\x74\xbb\xd0\x38\x2b\xda\x32\x80\xad\x3a\x83\x46\xb3\x0e\x32\xb6\x8c\xd6\xad\x11\xe8\xf4\x8e\x06\xe1\xf9\x06\x18\x55\xd7\x25\xfa\x6c\x5d\xdd\x6a\x7e\x0d\x59\x69\x05\xe6\xfd\xc9\xfd\xdf\xed\xff\xa9\xbf\x0b\x58\xc1\x2d\xfc\x1d\xfa\xdd\x6e\x2b\x4b\x3b\xc7\x1f\x52\xe9\x2e\x38\xe2\xf7\xeb\x32\xfd\xb9\x4e\xc4\xff\x79\x01\x30\x11\xcd\xc7\xdc\x13\xd5\x04\x36\x68\x84\x07\x6b\xba\xc6\x9f\x08\xe4\x61\x8b\x0e\x87\x39\x18\x23\xdf\x6f\x6d\x0f\xe8\xa3\xbe\x9e\xa6\xac\x52\xa8\x85\x87\xa2\x0d\x20\x54\x55\xa1\x43\x13\xc0\x3a\x81\x0e\x6a\xbe\x03\xc9\x37\x38\x32\x10\x03\x3f\x41\x25\x59\xa9\x79\x3d\x55\xe5\xa1\xb4\xad\xa1\x2b\x8c\x97\xa5\x75\x42\x99\xb5\xde\xc5\x7c\x0d\x17\xb4\xec\xa7\x5a\xad\x4d\x4d\x90\xae\xd5\x13\xc8\xb3\x4d\xa1\x56\xfc\x03\x03\x57\xda\x4f\x4f\x70\xdf\x9d\x01\x2e\x1e\xe4\x1b\x5a\x8e\x4e\xf2\xcb\xce\x05\x5e\x68\x5c\x6e\x1d\x6f\x86\x4e\x65\xdd\xde\xb8\x33\xc1\x4d\x5a\x93\x05\x99\x7f\xee\xe4\xca\xd2\x20\x5f\x98\x28\x29\x51\x38\x31\x66\x29\xc1\xec\xf7\xe0\xe8\x96\x83\x0b\x67\xb7\x70\xbd\x3a\x53\xce\x8b\x84\x59\x10\x74\xcf\x51\xc4\xf1\x46\xc8\xd2\x20\x4e\x5d\x66\x40\x35\x5f\x68\x34\x84\xdb\x79\x7f\x94\xad\x79\xf4\xf0\x1b\x1d\xa7\x98\xe0\x39\xbf\x7a\x03\x17\xa5\x3c\x75\xed\x59\x44\xa9\xa9\x41\xf3\x75\x88\x98\x57\x0b\x98\xb7\x66\xa3\x7c\x49\x9e\x70\xa1\xba\xed\xc5\x28\xe2\x78\xd5\x46\x4a\x7f\x00\x81\xdf\x28\xf4\x92\xe2\xe8\x17\xbc\x70\x69\xfe\x22\x74\x4c\xb3\x52\x5a\xa3\xe8\x68\x96\x32\xf9\x88\x7a\x2a\xd5\x69\x3f\x4b\x69\x1e\x63\x66\x72\xff\xe2\xbf\xf6\xb3\x76\x38\xd0\xd8\x0d\xc7\x3a\xba\x18\x1b\x86\x04\x87\x03\x60\xdd\x84\xdd\xe0\xc2\xf2\x93\x5f\xeb\xe7\x3b\x61\x92\x9c\x2a\x98\x9d\xf3\x18\xaf\xce\xc5\x9e\xeb\x61\xe4\x35\x16\xac\xe3\x7a\x11\xfb\x07\xc1\x06\xae\x07\xac\x29\xc0\x30\x5f\x93\x44\x59\x3a\x99\xe6\xd3\xeb\x6d\x72\xcf\xbd\xf8\x82\xc9\xcb\x21\x7e\x1c\xff\xf8\xd2\xa9\x26\x80\x77\xe5\x8a\xc9\x10\x1a\x7f\x9d\xa6\xa5\x30\x0f\x3e\x29\xb5\x6d\x45\xa5\xb9\xc3\xa4\xb4\x75\xca\x1f\xf8\x53\xaa\x55\xe1\xd3\x87\x6f\x2d\xba\x5d\x7a\x99\xbc\x4d\xde\xf5\x8b\xa4\x56\x26\x79\xf0\xac\x7f\x5c\x06\x7c\x0a\xe9\x03\xdf\xf0\x88\x4e\x2d\x88\x5f\xbf\x96\x90\x97\x98\xbe\xed\xb2\xf1\x12\x7f\x2a\x4d\xd4\xeb\x62\x5e\xb5\xa6\xa4\xbb\x7a\xbe\x80\xfd\xa0\xf4\x86\x3b\x88\x8f\x3b\x58\x01\x21\xd3\x62\x7e\x7c\xef\x2d\x3e\x0c\x8e\x71\x27\xf1\x18\xee\x25\xd6\x38\x67\x44\x28\xd0\x67\x5a\x5b\x63\x1f\xb9\x3a\xe3\xbd\xc6\x70\x87\xde\x77\x49\x29\xf4\x9f\x56\xf4\x91\xb5\x15\x98\xae\xad\xe6\x66\x3d\x8e\xbb\x98\xb3\xbf\xad\x2d\x5b\x24\xa5\x56\xe5\xe3\x94\xf2\xab\x57\x64\x0d\x6c\x91\x6c\xb8\x9e\x6f\x95\x11\x76\x9b\x14\xc1\xf2\xf9\xb9\x6c\x6b\x0c\xff\xe1\xba\xc5\xf9\x62\xb1\xf8\xd0\xc7\x56\xd6\xd5\x4b\x25\xd8\x22\xf1\x6d\x51\xab\x30\x1f\x65\x3e\xf4\xdf\xf4\x77\x24\x21\x85\x74\x2f\xe0\x63\x2c\xf0\x8e\x11\x3d\xf1\xa1\xc6\x20\xad\x58\xb1\xaf\xff\xba\xbb\x67\xf9\x2c\x53\xa6\x69\x43\xdf\x17\xa9\x84\x40\x13\xff\x0f\x11\x18\x18\x5e\x53\xb3\xc8\x2b\x25\xa8\xf1\x74\xff\x1e\x00\x00\xff\xff\x8e\xd4\xe5\x60\x21\x0d\x00\x00")

func templs_index_tmpl() ([]byte, error) {
	return bindata_read(
		_templs_index_tmpl,
		"templs/index.tmpl",
	)
}

var _templs_parts_base_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdd\x6e\xdb\x36\x14\xbe\xf7\x53\x9c\xe8\x62\xb6\x07\x49\xac\x93\x66\x6d\x67\xc9\x40\xda\x04\x41\x31\xa0\xdd\x45\x0b\x6c\x30\x8c\xe1\x98\x3a\x92\xd8\x48\xa4\x4a\x1e\xd9\xf1\x1c\x3f\xca\xee\xf6\x64\x7b\x92\x81\x52\xfc\xd3\x65\x08\x7a\x63\x9a\xdf\xe1\xf7\x9d\x1f\x9d\x43\x6e\xb7\x90\x51\xae\x34\x41\xb0\x44\x47\x01\xec\x76\x83\xe4\xec\xfa\xe3\xbb\x4f\xbf\xff\x7a\x03\x25\xd7\xd5\x6c\x90\xf8\x05\x2a\xd4\x45\x1a\x90\x0e\x3c\x40\x98\xcd\x06\x00\x49\x4d\x8c\x20\x4b\xb4\x8e\x38\x0d\x5a\xce\xa3\xd7\xc1\xd1\x50\x32\x37\x11\x7d\x6d\xd5\x2a\x0d\x7e\x8b\x3e\x5f\x45\xef\x4c\xdd\x20\xab\x65\x45\x01\x48\xa3\x99\x34\xa7\xc1\xfb\x9b\x94\xb2\x82\x4e\x78\x1a\x6b\x4a\x83\x95\xa2\x75\x63\x2c\x9f\x1c\x5d\xab\x8c\xcb\x34\xa3\x95\x92\x14\x75\x9b\x10\x94\x56\xac\xb0\x8a\x9c\xc4\x8a\xd2\xc9\x13\x99\x8c\x9c\xb4\xaa\x61\x65\xf4\x89\xd2\x95\xbb\x83\xc2\x34\x25\x59\xc0\xa5\x69\x19\x1c\xdb\x56\x32\x38\xf5\x27\x9d\x3d\xd1\xb8\xa3\xcd\xda\xd8\xcc\x9d\x08\x14\xc6\x17\x24\x3c\xa1\x85\xfe\xc7\xe4\x4f\xc8\xd8\x72\x69\xec\x09\xf5\xba\xde\xb0\x35\xf0\x8b\x59\x61\x05\x23\xde\x58\xd4\xd6\xe8\x71\x30\x1b\x78\x26\x2b\xae\x68\x76\xdb\xc9\x43\x2f\x09\xac\x1a\x97\x88\xde\xd2\x1d\xaa\x94\xbe\x03\x4b\x55\x1a\xb8\xd2\x58\x96\x2d\x83\x92\x3e\xc1\xd2\x52\x9e\x06\x42\xd5\x58\x90\x13\x39\xae\x3c\x1c\x2b\x69\x82\x27\x44\xde\x54\xe4\x4a\x22\xde\xb3\xfc\xe7\x72\x3f\x0b\x51\xe3\xbd\xcc\x74\xbc\x34\x86\x1d\x5b\x6c\xfc\x46\x9a\x5a\x1c\x00\x71\x11\x5f\xc4\xe7\x42\x3a\x77\xc4\xe2\x5a\xe9\x58\x3a\xd7\xa7\xff\x9c\x1b\xd1\x43\xa2\xc6\x03\xc3\x53\xce\xa2\x68\xae\x72\xa8\x18\xde\xdf\xc0\x9b\x85\x97\x01\x48\xfa\x6f\x07\xce\xca\x63\x7c\xc6\xb9\xf8\x31\x46\x1f\x96\xef\xce\x4b\x57\xaa\x95\xb8\x88\x5f\xc5\xe7\xc7\x7d\x17\xd2\x17\x17\xcc\x12\xd1\xcb\x7c\xbf\xa6\x25\xd7\x18\x9d\x89\x49\xfc\x32\x3e\xdf\xef\xfe\x57\x2f\x39\x9b\x93\xce\x54\xbe\x88\xa2\xd9\x20\x11\xfd\x64\x24\x4b\x93\x6d\x3a\xab\xc6\x15\xc8\x0a\x9d\x4b\x03\x8d\xab\x25\x5a\xe8\x97\x28\x57\xf7\x94\x45\x6c\x9a\x3d\xa0\xf4\x8a\xac\xeb\xc7\x00\x20\xc9\xd4\x81\xe8\x1b\x07\x95\x26\xfb\x68\x03\xd8\x6e\x81\xa9\x6e\x2a\x64\x82\x80\x4d\x13\x40\xec\x07\xb7\x23\x8a\x4c\xad\x3a\xd7\x42\x63\xff\xe7\x19\xa9\x6f\x84\x1e\x1b\xf4\x20\x76\x94\xca\x8d\x61\xb2\xdf\x13\x59\xd2\xec\x6d\x4c\xf7\x1c\xd5\x2d\x53\x16\xcc\x7e\x90\xa6\xd9\x4c\xe1\xfc\xc5\xe4\x12\x12\xfc\x4f\xbb\x15\x8a\xcb\x76\xd9\x95\x7d\x3f\x0b\x01\x30\xda\xc2\x5f\x29\x7f\x2c\x2b\xd4\x77\xc1\xec\xd3\xa3\x25\x11\x38\x4b\x44\xf3\xbc\xbb\x6b\x5a\x51\x65\x1a\xca\x60\xad\xb8\x84\x7f\xfe\xfa\x1b\x72\x63\xbf\xf5\xec\x1d\x77\xf3\x5f\x60\x85\x9d\xf3\x60\x76\xdb\x5f\x08\xb7\x58\xa1\xf7\x73\x76\x70\x74\x52\xd4\x7d\x29\x92\x7d\x0b\x8c\xf2\x56\x4b\x7f\xbb\x8c\x54\xe8\x42\x13\x16\xa1\x0d\x31\xac\xc7\x5b\x35\x1f\xde\x1a\x53\x54\x74\xa5\xb1\xda\xb0\x92\xee\xe3\xf2\x0b\x49\x1e\x2e\x52\x3b\x55\x73\xbb\x48\xfd\xcf\xc3\xc3\x81\x3f\xde\x0e\x46\x1e\x8a\xbf\xa6\xfd\xf2\xf0\x30\x5f\x8c\xe3\xa6\x75\xe5\x08\x6d\xd1\xd6\xa4\xd9\x8d\x77\x61\x67\xac\xd2\xc9\x8f\x9a\xd6\x70\x8d\x4c\xa3\xf1\x14\x53\x17\x4b\x4b\xc8\x74\x53\x91\x3f\x38\x32\xe3\x70\x50\xa7\x2e\x2e\x88\x1f\x21\xf7\x76\xf3\x09\x8b\x0f\x58\xd3\xc8\x8c\xe7\x2f\x16\x53\x8c\xd1\x6d\xb4\x4c\x27\x53\x8c\xfd\x34\x14\xd3\x3a\x6e\xd0\x92\xe6\x0f\x26\xa3\x58\x69\x47\x96\xdf\x52\x6e\x2c\x8d\x7c\x4a\x83\xdd\x78\xb4\x56\x3a\x33\xeb\x30\x33\xb2\x8b\x27\x1c\xf6\x75\x18\x86\x43\x21\xd6\xeb\x75\x5c\x74\x29\x47\xb8\xcf\xb9\x2b\xed\x71\xf7\xc5\x0d\xc3\x61\x81\xc3\xf1\x74\x50\xe0\x68\xd8\x87\x3c\x0c\x61\xf8\xf9\x2a\xba\x7c\xfd\xe6\xe5\xc5\xe5\xab\x9f\xa2\x89\x07\xb0\x65\xb3\x3f\xe6\x48\x67\x1e\x6b\xb0\x20\xff\x2c\x78\xfc\x38\x84\x89\xe8\xc7\x2d\x11\xfd\x7b\xb5\xdd\x02\xe9\xcc\xf7\xf0\xc9\xeb\xe6\xa7\x64\xb7\x3b\x9a\xfe\x0d\x00\x00\xff\xff\x6e\xc7\x3d\xb2\xf9\x06\x00\x00")

func templs_parts_base_tmpl() ([]byte, error) {
	return bindata_read(
		_templs_parts_base_tmpl,
		"templs/parts/base.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templs/404.tmpl": templs_404_tmpl,
	"templs/500.tmpl": templs_500_tmpl,
	"templs/index.tmpl": templs_index_tmpl,
	"templs/parts/base.tmpl": templs_parts_base_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templs": &_bintree_t{nil, map[string]*_bintree_t{
		"404.tmpl": &_bintree_t{templs_404_tmpl, map[string]*_bintree_t{
		}},
		"500.tmpl": &_bintree_t{templs_500_tmpl, map[string]*_bintree_t{
		}},
		"index.tmpl": &_bintree_t{templs_index_tmpl, map[string]*_bintree_t{
		}},
		"parts": &_bintree_t{nil, map[string]*_bintree_t{
			"base.tmpl": &_bintree_t{templs_parts_base_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}
